package Maestro;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class Maestro {

	public static void main(String[] args) throws IOException, InterruptedException {
		
		//ArrayList objects for reading state cell locations
        //double proportionmilk = 0.5; 		//relative proportion of dairy to AP (universal for all states)
		//double proportionmeat = 0.5;		//relative proportion of meat to AP (universal for all states)
		
		//relative proportion of dairy to AP (by state) 
		//values (means) from MeatDairyProduction.html
		/*final double proportionmilkTO = 0.548; 		
		final double proportionmilkBA = 0.833;
		final double proportionmilkMG = 0.940;
		final double proportionmilkSP = 0.667;
		final double proportionmilkPR = 0.915;
		final double proportionmilkSC = 0.964;
		final double proportionmilkRS = 0.899;
		final double proportionmilkMS = 0.378;
		final double proportionmilkMT = 0.407;
		final double proportionmilkGO = 0.824;*/
		
		//relative proportion of meat production to AP (by state) (this must be inverse of proportionmilk) 
		/*final double proportionmeatTO = 1-proportionmilkTO; 		
		final double proportionmeatBA = 1-proportionmilkBA;
		final double proportionmeatMG = 1-proportionmilkMG;
		final double proportionmeatSP = 1-proportionmilkSP;
		final double proportionmeatPR = 1-proportionmilkPR;
		final double proportionmeatSC = 1-proportionmilkSC;
		final double proportionmeatRS = 1-proportionmilkRS;
		final double proportionmeatMS = 1-proportionmilkMS;
		final double proportionmeatMT = 1-proportionmilkMT;
		final double proportionmeatGO = 1-proportionmilkGO;*/
		
		//intensity values for converting between CRAFTY units and gigagrams
		//units are gg per 25 km2 (and represent the maximum, perfect, production in a single CRAFTY cell) 
		final double soyintensity = 20;		
		final double maizeintensity = 30;
		final double milkintensity = 2.5;  //check is this right; should use ~83,000 kg per sq km (not 67 as in R analysis) See email to Ramon 12/07/18   
		final double meatintensity = 0.275;
		
    	//conversion factor for pasture CRAFTY units (dairy) -> gigagrams by state
    	//currently uses uniform value for all states (makes sense if single value used to convert gigagrams -> CRAFTY
		/*final double milkmultipleTO = milkintensity;    
		final double milkmultipleBA = milkintensity;   
		final double milkmultipleMG = milkintensity;
		final double milkmultipleSP = milkintensity;
		final double milkmultiplePR = milkintensity;
		final double milkmultipleSC = milkintensity;
		final double milkmultipleRS = milkintensity;
		final double milkmultipleMS = milkintensity;
		final double milkmultipleMT = milkintensity;
		final double milkmultipleGO = milkintensity;*/
		
		//conversion factor for pasture CRAFTY units (meat) -> gigagrams by state
		//currently uses uniform value for all states (makes sense if single value used to convert gigagrams -> CRAFTY
		/*final double meatmultipleTO = meatintensity;    
		final double meatmultipleBA = meatintensity;
		final double meatmultipleMG = meatintensity;
		final double meatmultipleSP = meatintensity;
		final double meatmultiplePR = meatintensity;
		final double meatmultipleSC = meatintensity;
		final double meatmultipleRS = meatintensity;
		final double meatmultipleMS = meatintensity;
		final double meatmultipleMT = meatintensity;
		final double meatmultipleGO = meatintensity;*/
		
		//proportion of national production from 10 simulated states (see TenStateProduction.html, median values 2000-2015)
		final double dairy_10state = 0.83;
		final double meat_10state = 0.78;
		final double maize_10state = 0.94;
		final double soy_10state = 0.96;		
		
		final String craftypath = "C:/Users/k1076631/craftyworkspace/CRAFTY_TemplateCoBRA/";
		final String stellapath = "C:\\Users\\k1076631\\Stella\\";
		final String scenarioname = "testing_2019-07-12b";//must be the same as in Scenario.xml in CEAFTY
		final String outputdir = "output/Brazil/Unknown/";//must be output/World/Region with the latter two found in Scenario and Region xml files in CRAFTY/data/xml
		final String Stellabatchfile = "testscript.bat";
		final String demandfile = "Demand_2019-07-01f_2001.csv";
		final String regionfile = "region2001_noDC_HD_2019-07-03.csv";
		
		//variable declaration
		final int runs = 1; //specify number of runs with random parameters, must be the same as the -r number in CRAFTY configuration parameters
		final int starttic = 2002;// has to be 1 year higher than starting tic in CRAFTY as its used to read correct line from stella input
		final int finaltic = 2016; //has to be 1 year higher than ending tic as its used to read correct line from stella input
		ArrayList<Integer> Nature = new ArrayList<Integer>();
		ArrayList<Integer> OtherAgri = new ArrayList<Integer>();
		ArrayList<Integer> Other = new ArrayList<Integer>();
		ArrayList<Integer> Year = new ArrayList<Integer>();
		try {
			File fileg = new File(craftypath+"data/csv/"+demandfile);
			BufferedReader br = new BufferedReader(new FileReader(craftypath+"data/csv/"+demandfile));
		    String line;
		    line=br.readLine();
		    while ((line = br.readLine()) != null) {
		       System.out.println("Debug: Line is "+line);
		       String[] line2=line.split(",");
		       Year.add(Integer.parseInt(line2[0]));
		       Nature.add(Integer.parseInt(line2[3]));
		       OtherAgri.add(Integer.parseInt(line2[5]));
		       Other.add(Integer.parseInt(line2[6]));
		    }
		   
		    br.close();
		    
		}
	 catch (IOException e) {
        e.printStackTrace();
    }
		
		
		for(int j=0; j<runs; j++){//runs for batchmode
			System.out.println("run "+j);
			//this is where Maestro starts iterating tics
			int tic = starttic;
			double storagesoy = 0;// the carry-over storage of soy
			double storagemaize = 0;// the carry - over storage of maize (leftovers from previous year)
			double storagemeat = 0;// same for ap but this could be removed depending on whether it makes sense
			//updated.txt does not exit initially, this is added dynamically by meastro to tell CRAFTY to GO
			//if updated.txt does not exist CRAFTY is waiting for STELLA
			while(true){
			if(new File(craftypath+"data/updated.txt").isFile()){
				System.out.println("A copy of updated.txt exists in CRAFTY/data. This could be due to a failed previous run. Delete this file and updated2.txt if it exists to continue.");
				Thread.sleep(5000);
			}

			else{
				break;
			}
			}
				double celltotal = 161905;//Total cellnumber in crafty model, used to make stella input proportional to crafty demand
				double inputsoy = 0; //the soy which is sent to stella
				double inputmaize = 0;// the maize which is sent to stella
				double inputmeat = 0;//the ap which is sent to stella (meat)   [changed! from inputap]
				double inputdairy = 0; //dairy sent to stella
				
				double demandsoy = 0;//demand for soy from stella to crafty
				double demandmaize = 0;//demand for maize from stella to crafty
				double demandmeat = 0;//demand for meat from stella to crafty
				double demanddairy=0; //demand for dairy from stella to crafty
				
				double indemandsoy =0;  //internal demand (this is read from a file)
				double indemandmaize = 0; //internal demand (this is read from a file)
				double indemandmeat = 0;  //internal demand (this is read from a file)
				double indemanddairy = 0;  //internal demand (this is read from a file)
				
				double supplysoy=0;//soy production from crafty
				double supplymaize = 0;//maize production from crafty
				
				/*double supplyapTO = 0;// animal produce (pasture) production from crafty
				double supplyapBA = 0;// animal produce (pasture) production from crafty
				double supplyapMG = 0;// animal produce (pasture) production from crafty
				double supplyapSP = 0;// animal produce (pasture) production from crafty
				double supplyapPR = 0;// animal produce (pasture) production from crafty
				double supplyapSC = 0;// animal produce (pasture) production from crafty
				double supplyapRS = 0;// animal produce (pasture) production from crafty
				double supplyapMS = 0;// animal produce (pasture) production from crafty
				double supplyapMT = 0;// animal produce (pasture) production from crafty
				double supplyapGO = 0;// animal produce (pasture) production from crafty*/
				
				double supplymeat=0; //used for total of all states
				
				/*double supplymeatTO = 0;// animal produce (pasture) production from crafty
				double supplymeatBA = 0;// animal produce (pasture) production from crafty
				double supplymeatMG = 0;// animal produce (pasture) production from crafty
				double supplymeatSP = 0;// animal produce (pasture) production from crafty
				double supplymeatPR = 0;// animal produce (pasture) production from crafty
				double supplymeatSC = 0;// animal produce (pasture) production from crafty
				double supplymeatRS = 0;// animal produce (pasture) production from crafty
				double supplymeatMS = 0;// animal produce (pasture) production from crafty
				double supplymeatMT = 0;// animal produce (pasture) production from crafty
				double supplymeatGO = 0;// animal produce (pasture) production from crafty*/
				
				/*double supplymilkTO = 0;// animal produce (pasture) production from crafty
				double supplymilkBA = 0;// animal produce (pasture) production from crafty
				double supplymilkMG = 0;// animal produce (pasture) production from crafty
				double supplymilkSP = 0;// animal produce (pasture) production from crafty
				double supplymilkPR = 0;// animal produce (pasture) production from crafty
				double supplymilkSC = 0;// animal produce (pasture) production from crafty
				double supplymilkRS = 0;// animal produce (pasture) production from crafty
				double supplymilkMS = 0;// animal produce (pasture) production from crafty
				double supplymilkMT = 0;// animal produce (pasture) production from crafty
				double supplymilkGO = 0;// animal produce (pasture) production from crafty*/
				
				double supplymilk = 0; //used for total of all states
				
				
				//this was original dummy maestro code that simply waves things CRAFTY across
				//while(true){
					/*
				while(true){
					if(new File("C:/Users/k1076631/craftyworkspace/CRAFTY_Dummy/data/updated.txt").isFile()){
						
					}
					else{
						File file = new File("C:/Users/k1076631/craftyworkspace/CRAFTY_Dummy/data/updated.txt");
						file.createNewFile();
						break;
					}
				}
				while(true){
					if(new File("C:/Users/k1076631/craftyworkspace/CRAFTY_Dummy/data/stellaout.csv").isFile()){
						File file = new File("C:/Users/k1076631/craftyworkspace/CRAFTY_Dummy/data/stellaout.csv");
						file.delete();
						break;
					}
					else{
						
					}
				}*/
				
				//this is where we start talking to stella
				Runtime.getRuntime().exec("cmd /c cd "+stellapath+" && start \"\"  "+stellapath+Stellabatchfile);
				while(true){
					System.out.println("trying 2 talk 2 stella");
				try(BufferedReader br = new BufferedReader(new FileReader(stellapath+"status.txt"))) {//if stella is paused 
				    StringBuilder sb = new StringBuilder();
				    String line = br.readLine();
				    String[] words =line.split("\\s+");
				    if(words[1].equals("Paused")||words[1].equals("Stopped")){  //if not paused or stopped continue to wait for stella
				    	File file0 = new File(stellapath+"status.txt");
						file0.delete();
						File file1 = new File(stellapath+"status.txt");
						try {
						    FileWriter f2 = new FileWriter(file1, false);
						    f2.write("Status: Resuming");  //this doesn't tell stella anything, it is just for the user
						    f2.close();
						} catch (IOException e) {
						    e.printStackTrace();
						} 
						
						if(tic == finaltic){
							System.out.println("zipping up final tic data");
				    		String sourceFile = stellapath+"Data\\ToCRAFTY.csv";
				            FileOutputStream fos = new FileOutputStream(stellapath+"Data\\"+j+"_STELLAoutput_"+scenarioname+".zip");
				            ZipOutputStream zipOut = new ZipOutputStream(fos);
				            File fileToZip = new File(sourceFile);
				            FileInputStream fis = new FileInputStream(fileToZip);
				            ZipEntry zipEntry = new ZipEntry(fileToZip.getName());
				            zipOut.putNextEntry(zipEntry);
				            final byte[] bytes = new byte[1024];
				            int length;
				            while((length = fis.read(bytes)) >= 0) {
				                zipOut.write(bytes, 0, length);
				            }
				            zipOut.close();
				            fis.close();
				            fos.close();
				    	}
						
						BufferedReader tr = new BufferedReader(new FileReader(stellapath+"Data\\ToCRAFTY.csv"));//read in tocrafty file (contains demand in gigagrams from stella)
				    	String line2 = tr.readLine(); //skip header line
				    	System.out.println(line2);
				    	
				    	////////////////////////Soyin/////////////////////read in data for appropriate year for soy
				    	
				    	
				    	line2 = tr.readLine();  //read data (line 1: Global.CP Demand Input Soy)
				    	System.out.println(line2);
				    	
				    	String[] theline = line2.split(",");
				    	System.out.println(theline[(tic-(starttic-1))]);
				    	demandsoy = Double.parseDouble(theline[(tic-(starttic-1))]);  //put data in demand variable (tic-2000 because initialised at 2001 above)
						
				    	
				    	
				    	////////////////////maizein///////////////////read in data for appropriate year for maize
				    	
				    	line2 = tr.readLine();   //read data (line 2: Global.CP Demand Input Maize)
				    	System.out.println(line2);
				    	
				    	theline = line2.split(",");
				    	System.out.println(theline[(tic-(starttic-1))]);
				    	demandmaize = Double.parseDouble(theline[(tic-(starttic-1))]); //put data in demand variable (tic-2000 because initialised at 2001 above)
															    	
				    	
				    	
				    	///////////////AP/////////////////read in data for appropriate year for animal produce
				    	
				    	line2 = tr.readLine();  //read data (line 3: Global.AP Demand Input)
				    	System.out.println(line2);
				    	
				    	theline = line2.split(",");
				    	System.out.println(theline[(tic-(starttic-1))]);
				    	demandmeat = Double.parseDouble(theline[(tic-(starttic-1))]);  //put data in demand variable (tic-2000 because initialised at 2001 above)
						
						
				    	System.out.println("demandsoy"+demandsoy);
				    	System.out.println("demandmaize"+demandmaize);
				    	System.out.println("demandmeat"+demandmeat);
				    	
				    	////dairy////
				    	line2 = tr.readLine();  //read data (line 4: Global.Dairy Demand Input)
				    	System.out.println(line2);
				    	
				    	theline = line2.split(",");
				    	System.out.println(theline[(tic-(starttic-1))]);
				    	demanddairy = Double.parseDouble(theline[(tic-(starttic-1))]); //put data in demand variable (tic-2000 because initialised at 2001 above)
						
				    	tr.close();
				    	
				    	
				    	//now read internal demand from file (user must provide this)
				    	//does the same as lines above but putting into internal demand variables
				    	
				    	BufferedReader zr = new BufferedReader(new FileReader(stellapath+"Data\\InternalCRAFTY.csv"));//read in tocrafty file (this should be same format as the file stella creates)
				    	String line3 = zr.readLine();
				    	System.out.println(line3);
				    	
				    	////////////////////////Soyin/////////////////////read in data for appropriate year for soy
				    	
				    	
				    	line3 = zr.readLine();
				    	System.out.println(line3);
				    	
				    	String[] thenewline = line3.split(",");
				    	System.out.println(thenewline[(tic-(starttic-1))]);
				    	indemandsoy = Double.parseDouble(thenewline[(tic-(starttic-1))]);
				    	indemandsoy = indemandsoy-(storagesoy);//modify soy demand by available storage starting with internal
				    	double modstoragesoy=0;
				    	if(indemandsoy<0){
				    		indemandsoy=0;
				    		modstoragesoy=storagesoy-indemandsoy;
				    	}
				    	
				    	demandsoy = demandsoy-(modstoragesoy);
				    	if(demandsoy<0){
				    		demandsoy=0;
				    	}
				    	
				    	
				    	////////////////////maizein///////////////////read in data for appropriate year for maize
				    	
				    	line3 = zr.readLine();
				    	System.out.println(line3);
				    	
				    	thenewline = line3.split(",");
				    	System.out.println(thenewline[(tic-(starttic-1))]);
				    	indemandmaize = Double.parseDouble(thenewline[(tic-(starttic-1))]);
				    	indemandmaize = indemandmaize-(storagemaize);//modify maize demand by available storage starting with internal
				    	double modstoragemaize=0;
				    	if(indemandmaize<0){
				    		indemandmaize=0;
				    		modstoragemaize=storagemaize-indemandmaize;
				    	}
				    	
				    	demandmaize = demandmaize-(modstoragemaize);
				    	if(demandmaize<0){
				    		demandmaize=0;
				    	}			    	
				    	
				    	
				    	///////////////AP/////////////////read in data for appropriate year for animal produce
				    	
				    	line3 = zr.readLine();
				    	System.out.println(line3);
				    	
				    	thenewline = line3.split(",");
				    	System.out.println(thenewline[(tic-(starttic-1))]);
				    	indemandmeat = Double.parseDouble(thenewline[(tic-(starttic-1))]);
						
				    	System.out.println("indemandsoy"+indemandsoy);
				    	System.out.println("indemandmaize"+indemandmaize);
				    	System.out.println("indemandmeat"+indemandmeat);
				    	
				    	
				    	////dairy////
				    	line3 = zr.readLine();
				    	System.out.println(line3);
				    	
				    	thenewline = line3.split(",");
				    	System.out.println(thenewline[(tic-(starttic-1))]);
				    	indemanddairy = Double.parseDouble(thenewline[(tic-(starttic-1))]);
				    	zr.close();
				    	
				    	//include 10state proportion conversions here
				    	//conversion from gigagrams to CRAFTY units 
				    	double demandsoyc = soy_10state*((demandsoy+indemandsoy)/soyintensity); //scale demand to be in CRAFTY cells (currently based on production data maybe should be based on export)
				    	
				    	//conversion from gigagrams to CRAFTY units
				    	double demandmaizec = maize_10state*((demandmaize+indemandmaize)/maizeintensity);//scale demand to be in CRAFTY cells (currently based on production data maybe should be based on export)
				    					    	
				    	//conversion from gigagrams to CRAFTY units
				    	//apc is AP in crafty (pasture), meat and dairy are from stella
				    	double demandmeatc = meat_10state*((demandmeat+indemandmeat)/meatintensity);
				    	double demandmilkc = dairy_10state*((indemanddairy+demanddairy)/milkintensity);
				    	
				    	//EDIT 2019-07-08 (remove milk)
				    	//double demandapc = demandmeatc + demandmilkc;
				    	double demandapc = demandmeatc; 
				    	
				    	//total demand for all cells in crafty units
				    	double demandtotal = demandsoyc+demandmaizec+demandapc;//scale resultant demand up to CRAFTY demand standards based on total number of CRAFTY cells and the relative proportions of the Stella supplied data
				    	
				    	//now calculate demand (in cells) for each commodity (needed so crafty is not so sensitive)
				    	demandsoyc=(demandsoyc*celltotal)/demandtotal;
				    	demandmaizec=(demandmaizec*celltotal)/demandtotal;
				    	demandapc=(demandapc*celltotal)/demandtotal;
				    	
				    	 //update demand file in crafty
				    	File filec = new File(craftypath+"data/csv/"+demandfile);
						filec.delete();
						
						//2019-07-12 fix this hard coding so that it loops for length of original demand file?
						File filec2 = new File(craftypath+"data/csv/"+demandfile);
						try {
						    FileWriter f2 = new FileWriter(filec2, false);
						  f2.write("Year,Soy,Maize,Nature,Pasture,Other Agriculture,Other");
						  f2.write("\n");
						  f2.write(""+Year.get(0)+","+demandsoyc+","+demandmaizec+","+Nature.get(0)+","+demandapc+","+OtherAgri.get(0)+","+Other.get(0));
						  f2.write("\n");
						  f2.write(""+Year.get(1)+","+demandsoyc+","+demandmaizec+","+Nature.get(1)+","+demandapc+","+OtherAgri.get(1)+","+Other.get(1));
						  f2.write("\n");
						  f2.write(""+Year.get(2)+","+demandsoyc+","+demandmaizec+","+Nature.get(2)+","+demandapc+","+OtherAgri.get(2)+","+Other.get(2));
						  f2.write("\n");
						  f2.write(""+Year.get(3)+","+demandsoyc+","+demandmaizec+","+Nature.get(3)+","+demandapc+","+OtherAgri.get(3)+","+Other.get(3));
						  f2.write("\n");
						  f2.write(""+Year.get(4)+","+demandsoyc+","+demandmaizec+","+Nature.get(4)+","+demandapc+","+OtherAgri.get(4)+","+Other.get(4));
						  f2.write("\n");
						  f2.write(""+Year.get(5)+","+demandsoyc+","+demandmaizec+","+Nature.get(5)+","+demandapc+","+OtherAgri.get(5)+","+Other.get(5));
						  f2.write("\n");
						  f2.write(""+Year.get(6)+","+demandsoyc+","+demandmaizec+","+Nature.get(6)+","+demandapc+","+OtherAgri.get(6)+","+Other.get(6));
						  f2.write("\n");
						  f2.write(""+Year.get(7)+","+demandsoyc+","+demandmaizec+","+Nature.get(7)+","+demandapc+","+OtherAgri.get(7)+","+Other.get(7));
						  f2.write("\n");
						  f2.write(""+Year.get(8)+","+demandsoyc+","+demandmaizec+","+Nature.get(8)+","+demandapc+","+OtherAgri.get(8)+","+Other.get(8));
						  f2.write("\n");
						  f2.write(""+Year.get(9)+","+demandsoyc+","+demandmaizec+","+Nature.get(9)+","+demandapc+","+OtherAgri.get(9)+","+Other.get(9));
						  f2.write("\n");
						  f2.write(""+Year.get(10)+","+demandsoyc+","+demandmaizec+","+Nature.get(10)+","+demandapc+","+OtherAgri.get(10)+","+Other.get(10));
						  f2.write("\n");
						  f2.write(""+Year.get(11)+","+demandsoyc+","+demandmaizec+","+Nature.get(11)+","+demandapc+","+OtherAgri.get(11)+","+Other.get(11));
						  f2.write("\n");
						  f2.write(""+Year.get(12)+","+demandsoyc+","+demandmaizec+","+Nature.get(12)+","+demandapc+","+OtherAgri.get(12)+","+Other.get(12));
						  f2.write("\n");
						  f2.write(""+Year.get(13)+","+demandsoyc+","+demandmaizec+","+Nature.get(13)+","+demandapc+","+OtherAgri.get(13)+","+Other.get(13));
						  f2.write("\n");
						  f2.write(""+Year.get(14)+","+demandsoyc+","+demandmaizec+","+Nature.get(14)+","+demandapc+","+OtherAgri.get(14)+","+Other.get(14));
						  f2.write("\n");
						  f2.write(""+Year.get(15)+","+demandsoyc+","+demandmaizec+","+Nature.get(15)+","+demandapc+","+OtherAgri.get(15)+","+Other.get(15));
						  f2.write("\n");
						    f2.close();
						} catch (IOException e) {
						    e.printStackTrace();
						} 
						System.out.println("demandsoyc"+demandsoyc);
				    	System.out.println("demandmaizec"+demandmaizec);
				    	System.out.println("demandapc"+demandapc);
				    	//System.exit(0);
				    	//crafty does its thing
						
				    	
						while(true){
							File filecz = new File(craftypath+"data/csv/"+demandfile);
							if(filecz.exists()){
								
								//create updated so that crafty resumes 
								File file = new File(craftypath+"data/updated.txt");
								file.createNewFile();
							
							break;
							}	
							else{
								Thread.sleep(5000);
							}
							}
				    	
				    	
						System.out.println("Waiting for CRAFTY signal "+(tic-1));
						while(true){//pause until updated2 file informs program crafty outputs are ready
							if(new File(craftypath+"data/updated2.txt").isFile()){
								System.out.println("Debug: found updated2");
								break;
							}
							if(tic==finaltic){
								if(new File(craftypath+outputdir+scenarioname+"/0-"+j+"/"+scenarioname+"-0-"+j+"-Cell-"+(tic-1)+".csv").isFile()){
									System.out.println("Debug: found final data file");
									break;
								}
								System.out.println("Debug: no file called "+craftypath+outputdir+scenarioname+"/0-"+j+"/"+scenarioname+"-0-"+j+"-Cell-"+(tic-1)+".csv");
							}
							try {
								Thread.sleep(5000);
							} catch (InterruptedException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
						
						try{

				    		File filen = new File(craftypath+"data/updated2.txt");
				    		if(filen.exists()){
				    		filen.delete();}//delete updated file ready for next tic
				    		

				    	}catch(Exception e){

				    		e.printStackTrace();

				    	}
						
						while(true){//pause until updated2 file is deleted
							if(new File(craftypath+"data/updated2.txt").isFile()){
								System.out.println("Debug: updated2 still exists");
								try {
									Thread.sleep(5000);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}
							else{
								break;
							}
							
							
						}
						
						///////convert crafty output
						int truetic = tic-1;
						
						//read crafty file line by line
						//BufferedReader br2 = new BufferedReader(new FileReader(craftypath+"output/V0/Brazil/Unknown/Brazil/0-0/Unknown/Brazil-0-0-Unknown-Cell-"+truetic+".csv"));
						BufferedReader br2 = new BufferedReader(new FileReader(craftypath+outputdir+scenarioname+"/0-"+j+"/"+scenarioname+"-0-"+j+"-Cell-"+truetic+".csv"));
						BufferedReader br3 = new BufferedReader(new FileReader(craftypath+"data/csv/"+regionfile)); //don't need this now not assigning pixels?
						
						String ln;
						String[] theline2;
						String ln3; //don't need this now not assigning pixels
						String[] theline3; //don't need this now not assigning pixels
						
						//reset values just in case
						supplysoy=0;
						supplymaize=0;
						supplymeat=0;
						
						/*supplyapTO = 0;// animal produce (pasture) production from crafty 17
						supplyapBA = 0;// animal produce (pasture) production from crafty 29
						supplyapMG = 0;// animal produce (pasture) production from crafty 31
						supplyapSP = 0;// animal produce (pasture) production from crafty 35
						supplyapPR = 0;// animal produce (pasture) production from crafty 41
						supplyapSC = 0;// animal produce (pasture) production from crafty 42
						supplyapRS = 0;// animal produce (pasture) production from crafty 43
						supplyapMS = 0;// animal produce (pasture) production from crafty 50
						supplyapMT = 0;// animal produce (pasture) production from crafty 51
						supplyapGO = 0;// animal produce (pasture) production from crafty 52 */
						
						ln=br2.readLine(); //read header
						//ln3 = br3.readLine(); //read header   //don't need this now not assigning pixels?
						
						//read both output (br2) and region (br3) files line-by-line simultaneously
						//this assumes files are identical in number and order of lines! 2019-07-10: PROBLEM this is not true in runs 2019-07-03, BUT if we remove state-by-state accounting of meat/dairy then this is moot.  
						//get muniID from br3 for corresponding line of br2
						//also totals soy, maize from br2 as we go
						while((ln = br2.readLine()) != null){
							//ln3 = br3.readLine(); //don't need this now not assigning pixels?
							theline2 = ln.split(",");
							//theline3 = ln3.split(","); //don't need this now not assigning pixels?
							
							//total soy and maize
							supplysoy=supplysoy+Double.parseDouble(theline2[5]); 
							supplymaize = supplymaize +Double.parseDouble(theline2[6]);
							supplymeat = supplymeat +Double.parseDouble(theline2[10]);
							
							//search for cell in state file
							
							//Edit 2019-07-08 (due to change in number of columns in region.csv)
							//int muniid = Integer.parseInt(theline3[3]);  /changed index from 2 to 2
							/*int muniid = Integer.parseInt(theline3[2]);
							int stateid = Integer.parseInt(Integer.toString(muniid).substring(0, 2)); //stateid is first two digits of muniID
							
							//allocate date to corresponding state
							if(stateid==17){
								supplyapTO=supplyapTO+Double.parseDouble(theline2[10]);
							}
							else if(stateid==29){
								supplyapBA=supplyapBA+Double.parseDouble(theline2[10]);
							}
							else if(stateid==31){
								supplyapMG=supplyapMG+Double.parseDouble(theline2[10]);
							}
							else if(stateid==35){
								supplyapSP=supplyapSP+Double.parseDouble(theline2[10]);
							}
							else if(stateid==41){
								supplyapPR=supplyapPR+Double.parseDouble(theline2[10]);
							}
							else if(stateid==42){
								supplyapSC=supplyapSC+Double.parseDouble(theline2[10]);
							}
							else if(stateid==43){
								supplyapRS=supplyapRS+Double.parseDouble(theline2[10]);
							}
							else if(stateid==50){
								supplyapMS=supplyapMS+Double.parseDouble(theline2[10]);
							}
							else if(stateid==51){
								supplyapMT=supplyapMT+Double.parseDouble(theline2[10]);
							}
							else if(stateid==52){
								supplyapGO=supplyapGO+Double.parseDouble(theline2[10]);
							}
							else{
								System.out.println("Maestro: Warning cell not in state");  //check this state is in our list
								System.out.println(theline2);
								System.out.println(theline3);
								System.exit(1);  //terminates entire simulation
							}*/
							
						}
						br2.close(); //close reader
						//br3.close();
						
						System.out.println("supplysoy (CRAFTY): "+supplysoy);
						System.out.println("supplymaize (CRAFTY): "+supplymaize);
						System.out.println("supplymeat (CRAFTY): "+supplymeat);
						
						//convert back from crafty units to gigagrams
						//also apply the 10state simulation correction
						supplysoy = (supplysoy*soyintensity)/soy_10state;
						supplymaize = (supplymaize*maizeintensity)/maize_10state;
						supplymeat = (supplymeat*meatintensity)/meat_10state;
												
						System.out.println("supplysoy (gg): "+supplysoy);
						System.out.println("supplymaize (gg): "+supplymaize);
						System.out.println("supplymeat (gg): "+supplymeat);
						
						
				    	/////////soyout///////////////////
						double reportsoy = supplysoy;
						//calculate soy production to sent to stella (subtract internal demand)
						if(indemandsoy>=storagesoy){
							indemandsoy = indemandsoy-storagesoy;
							storagesoy=0;
						}
						else{
							storagesoy = storagesoy-indemandsoy;
							indemandsoy=0;
						}
						supplysoy = supplysoy-indemandsoy;
						
						if(supplysoy<0){
							supplysoy=0;
						}
						double reportsoy2 = supplysoy;
						
						//do we add or take from storage?
				    	if (demandsoy <= storagesoy){
				    		inputsoy = demandsoy;
				    		storagesoy = 0;
				    		storagesoy += supplysoy;
				    	}
				    	else{
				    		inputsoy = storagesoy+supplysoy;
				    		if(inputsoy>=demandsoy){
				    	    storagesoy = inputsoy-demandsoy;
				    	    inputsoy=demandsoy;
				    		}
				    		else{
				    			storagesoy=0;
				    		}
				    	}
				    	System.out.println("storagesoy="+storagesoy);
				    	System.out.println("inputsoy="+inputsoy);
				    	System.out.println("demandsoy="+demandsoy);
				    	System.out.println("supplysoy="+supplysoy);
				    	
				    	///////////////////maizeout///////////
				    	Double reportmaize = supplymaize;
				    	//calculate maize production to sent to stella (subtract internal demand)
				    	if(indemandmaize>=storagemaize){
							indemandmaize = indemandmaize-storagemaize; //internal demand cannot be met entirely from storage
							storagemaize=0;
						}
						else{
							storagemaize = storagemaize-indemandmaize;  //some storage left over, internal demand satisfied
							indemandmaize=0;
						}
						supplymaize = supplymaize-indemandmaize;   //reduce supply (proudction) by internal demand (this may be zero)
						
						if(supplymaize<0){   //if we could not meet internal demand with supply (production), set supply (production) to zero. this means nothing is exported (to stella)
							supplymaize=0;
						}
						double reportmaize2 = supplymaize;  //this is for maestro reporting
						
						if (demandmaize <= storagemaize){ //if what we still have in stroage (after meeting internal demand) is sufficient for external demand...
				    		inputmaize = demandmaize;   //set input (sent to stella) to equal what is required
				    		storagemaize = 0;     //set storage to zero even if there is some left, to represent it going bad after one year
				    		storagemaize += supplymaize;   //put remaining supply (production) from this year into storage for next year
				    	}
				    	else{         //storage is not sufficient to meet external demand
				    		inputmaize = storagemaize+supplymaize;  //set input to stella to be all remaining storage plus what we have in supply (production) - this could now exceed what we need for external demand (dealt with in next lines)
				    		if(inputmaize>=demandmaize){      //if combined storage and supply is greater than external demand
				    	    storagemaize = inputmaize-demandmaize;  //remainder after external demand is met is put in storage (can assume this is all from this year as storage from last year was insufficient to meet the demand)
				    	    inputmaize=demandmaize;   //and this meets external demand to send to stella
				    		}
				    		else{   //otherwise in the case where storage+supply are insufficient to meet external demand, storage is zero (and anything we have is sent to stella)
				    			storagemaize=0;
				    		}
				    	}
				    	System.out.println("storagemaize="+storagemaize);
				    	System.out.println("inputmaize="+inputmaize);
				    	System.out.println("demandmaize="+demandmaize);
				    	System.out.println("supplymaize="+supplymaize);
				    	
				    	///////////apout////////////////
				    	//separating AP (from crafty) into meat and dairy for stella
				    	//currently proportion meat and proportion milk are constant by state (might want to change?)
				    	
				    	//2019-07-10: This needs to change to ignore dairy... i.e. just use total (10state) Pasture Service and convert to gg by a single value (ignore multiple states) 
				    	
				    	/*
				    	//separate meat
				    	 supplymeatTO = supplyapTO*proportionmeatTO;
						 supplymeatBA = supplyapBA*proportionmeatBA;
						 supplymeatMG = supplyapMG*proportionmeatMG;
						 supplymeatSP = supplyapSP*proportionmeatSP;
						 supplymeatPR = supplyapPR*proportionmeatPR;
						 supplymeatSC = supplyapSC*proportionmeatSC;
						 supplymeatRS = supplyapRS*proportionmeatRS;
						 supplymeatMS = supplyapMS*proportionmeatMS;
						 supplymeatMT = supplyapMT*proportionmeatMT;
						 supplymeatGO = supplyapGO*proportionmeatGO;
						 
						 //convert to gigagrams (this is by state)
						 supplymeatTO = supplymeatTO*meatmultipleTO;
						 supplymeatBA = supplymeatBA*meatmultipleBA;
						 supplymeatMG = supplymeatMG*meatmultipleMG;
						 supplymeatSP = supplymeatSP*meatmultipleSP;
						 supplymeatPR = supplymeatPR*meatmultiplePR;
						 supplymeatSC = supplymeatSC*meatmultipleSC;
						 supplymeatRS = supplymeatRS*meatmultipleRS;
						 supplymeatMS = supplymeatMS*meatmultipleMS;
						 supplymeatMT = supplymeatMT*meatmultipleMT;
						 supplymeatGO = supplymeatGO*meatmultipleGO;
						 
						 //separate milk
						 supplymilkTO = supplyapTO*proportionmilkTO;
						 supplymilkBA = supplyapBA*proportionmilkBA;
						 supplymilkMG = supplyapMG*proportionmilkMG;
						 supplymilkSP = supplyapSP*proportionmilkSP;
						 supplymilkPR = supplyapPR*proportionmilkPR;
						 supplymilkSC = supplyapSC*proportionmilkSC;
						 supplymilkRS = supplyapRS*proportionmilkRS;
						 supplymilkMS = supplyapMS*proportionmilkMS;
						 supplymilkMT = supplyapMT*proportionmilkMT;
						 supplymilkGO = supplyapGO*proportionmilkGO;
						 
						 //convert
						 supplymilkTO = supplymilkTO*milkmultipleTO;
						 supplymilkBA = supplymilkBA*milkmultipleBA;
						 supplymilkMG = supplymilkMG*milkmultipleMG;
						 supplymilkSP = supplymilkSP*milkmultipleSP;
						 supplymilkPR = supplymilkPR*milkmultiplePR;
						 supplymilkSC = supplymilkSC*milkmultipleSC;
						 supplymilkRS = supplymilkRS*milkmultipleRS;
						 supplymilkMS = supplymilkMS*milkmultipleMS;
						 supplymilkMT = supplymilkMT*milkmultipleMT;
						 supplymilkGO = supplymilkGO*milkmultipleGO;
						 
						 //totals for all states (gigagrams)
						 supplymeat = supplymeatTO+supplymeatBA+supplymeatMG+supplymeatSP+supplymeatPR+supplymeatSC+supplymeatRS+supplymeatMS+supplymeatMT+supplymeatGO;
						 supplymilk = supplymilkTO+supplymilkBA+supplymilkMG+supplymilkSP+supplymilkPR+supplymilkSC+supplymilkRS+supplymilkMS+supplymilkMT+supplymilkGO;
						 
						 //apply 10state correction
						 supplymeat = supplymeat/meat_10state;
						 supplymilk = supplymilk/dairy_10state;
						*/
				    	
						 //break from calculations to report to user
						 //write file for user (production data)
						 File Maestroou = new File(stellapath+"Data\\"+j+"_FromMaestro"+(tic-1)+"_"+scenarioname+".csv");
							try {
							    FileWriter m1 = new FileWriter(Maestroou, false);
							    m1.write("Soy Production (gg),"+reportsoy);
							  m1.write("\n");
							  m1.write("Soy Production (gg) after internal demand,"+reportsoy2);
							  m1.write("\n");
							  m1.write("Soy exported (gg),"+inputsoy);
							  m1.write("\n");
							  m1.write("Soy in storage (gg),"+storagesoy);
							  m1.write("\n");
							  m1.write("Maize Production (gg),"+reportmaize);
							  m1.write("\n");
							  m1.write("Maize Production (gg) after internal demand,"+reportmaize2);
							  m1.write("\n");
							  m1.write("Maize exported (gg),"+inputmaize);
							  m1.write("\n");
							  m1.write("Maize in storage (gg),"+storagemaize);
							  m1.write("\n");
							  /*
							  m1.write("Meat Production TO (gg),"+supplymeatTO);
							  m1.write("\n");
							  m1.write("Meat Production BA (gg),"+supplymeatBA);
							  m1.write("\n");
							  m1.write("Meat Production MG (gg),"+supplymeatMG);
							  m1.write("\n");
							  m1.write("Meat Production SP (gg),"+supplymeatSP);
							  m1.write("\n");
							  m1.write("Meat Production PR (gg),"+supplymeatPR);
							  m1.write("\n");
							  m1.write("Meat Production SC (gg),"+supplymeatSC);
							  m1.write("\n");
							  m1.write("Meat Production RS (gg),"+supplymeatRS);
							  m1.write("\n");
							  m1.write("Meat Production MS (gg),"+supplymeatMS);
							  m1.write("\n");
							  m1.write("Meat Production MT (gg),"+supplymeatMT);
							  m1.write("\n");
							  m1.write("Meat Production GO (gg),"+supplymeatGO);
							  m1.write("\n");
							  
							  m1.write("Dairy Production TO (gg),"+supplymilkTO);
							  m1.write("\n");
							  m1.write("Dairy Production BA (gg),"+supplymilkBA);
							  m1.write("\n");
							  m1.write("Dairy Production MG (gg),"+supplymilkMG);
							  m1.write("\n");
							  m1.write("Dairy Production SP (gg),"+supplymilkSP);
							  m1.write("\n");
							  m1.write("Dairy Production PR (gg),"+supplymilkPR);
							  m1.write("\n");
							  m1.write("Dairy Production SC (gg),"+supplymilkSC);
							  m1.write("\n");
							  m1.write("Dairy Production RS (gg),"+supplymilkRS);
							  m1.write("\n");
							  m1.write("Dairy ProductionMS (gg),"+supplymilkMS);
							  m1.write("\n");
							  m1.write("Dairy Production MT (gg),"+supplymilkMT);
							  m1.write("\n");
							  m1.write("Dairy Production GO (gg),"+supplymilkGO);
							  m1.write("\n");
							  */
							  m1.write("Total Meat Production (gg),"+supplymeat);
							  m1.write("\n");
							  
							  m1.write("Total Dairy Production (gg), "+supplymilk);
							  m1.write("\n");
							 

							
							//resume calculations for stella
							
							//account for internal demand for meat
						 supplymeat = supplymeat-indemandmeat;
							if(supplymeat<0){  //if internal demand exceeds supply (production) nothing is sent to stella
								supplymeat=0;
							}
							m1.write("Total Meat Production (gg) after internal demand,"+supplymeat);
							  m1.write("\n");
							//account for internal demand of milk
							supplymilk = supplymilk-indemanddairy;
							if(supplymilk<0){   //if internal demand exceeds supply (production) nothing is sent to stella
								supplymilk=0;
							}
							m1.write("Total Dairy Production (gg) after internal demand,"+supplymilk);
							  m1.write("\n");
							
							  //input is what we actually give to stella
				    	if (demandmeat <= supplymeat){  //external demand is less than what remains after internal has been subtracted from supply 
				    		inputmeat = demandmeat;   //meet external demand (remainder is wasted i.e. supplymeat is re-initialised to 0 in next year)
				    		 	}
				    	else{                     //otherwise we dont't have enough to meet external demand, just send what we have...
				    		inputmeat = supplymeat;
				    		
				    	}
				    	if (demanddairy <= supplymilk){   //external demand is less than what remains after internal has been subtracted from supply
				    		inputdairy = demanddairy;   //meet external demand (remainder is wasted i.e. supplymeat is re-initialised to 0 in next year)
				    		 	}
				    	else{                         //otherwise we dont't have enough to meet external demand, just send what we have...
				    		inputdairy = supplymilk;
				    		
				    	}
				    	m1.write("Total Meat (gg) exported,"+inputmeat);
						  m1.write("\n");
						  m1.write("Total Dairy (gg) exported,"+inputdairy);
						  m1.write("\n");
				    	
						  double meat_out = demandapc * (demandmeatc / (demandmeatc + demandmilkc));
						  double milk_out = demandapc * (demandmilkc / (demandmeatc + demandmilkc));
						  
						  m1.write("CRAFTY demand Soy (cells), "+demandsoyc);
						  m1.write("\n");
						  m1.write("CRAFTY demand Maize (cells), "+demandmaizec);
						  m1.write("\n");
						  m1.write("CRAFTY demand Meat (cells), "+meat_out);
						  m1.write("\n");
						  m1.write("CRAFTY demand Dairy (cells), "+milk_out);
						  m1.write("\n");
						  
				    	 m1.close();
							} catch (IOException e) {
							    e.printStackTrace();
							}
				    	System.out.println("storagemeat= "+storagemeat);
				    	System.out.println("inputmeat= "+inputmeat);
				    	System.out.println("demandmeat= "+demandmeat);


				    	//////////////wrapping it up/////////
				    	
				    	//now create file that stella is going to use
				    	File file3 = new File(stellapath+"Data\\FromCRAFTY.csv");
						file3.delete();
						File file2 = new File(stellapath+"Data\\FromCRAFTY.csv");
						try {
						    FileWriter f2 = new FileWriter(file2, false);
						  f2.write("Global.CP_Supply_Input_Soy,"+inputsoy);
						  f2.write("\n");
						  f2.write("Global.CP_Supply_Input_Maize,"+inputmaize);
						  f2.write("\n");
						  f2.write("Global.AP_Supply_Input,"+inputmeat);
						  f2.write("\n");
						  f2.write("Global.AP_Dairy_Supply_Input,"+inputdairy);
						    f2.close();
						} catch (IOException e) {
						    e.printStackTrace();
						} 
						
						//check we really did create file
						while(true){
						File filez = new File(stellapath+"Data\\FromCRAFTY.csv");
						if(filez.exists()){
							
						//update handshake file - this tells stella to resume
						File file5 = new File(stellapath+"handshake.txt");
						file5.delete();
						File file4 = new File(stellapath+"handshake.txt");
						try {
						    FileWriter f2 = new FileWriter(file4, false);
						    f2.write("1");
						    f2.close();
						} catch (IOException e) {
						    e.printStackTrace();
						} 
						break;
						}
												
						else{
							Thread.sleep(5000);  //if stella is still busy, wait
						}
						}
				    	tic+=1;  //update for next iteration
				    	System.out.println("tic "+tic);
				    	if(tic>finaltic){
				    		br.close();
				    		break;
				    	}
				    }
				    else{
				    	Thread.sleep(5000);   //if crafty is still busy, wait
				    }

				}
				
			}
				
				
				
				
				
			System.out.println("Debug: ending the run");	
			
		
		}
		
		
		
		//old stuff

			/*Maestro obj = new Maestro();

			//String domainName = "google.com";

			//in mac oxs
			String command = "gams ../../../../GAMS/win64/24.9/allbases.gms";

			//in windows
			//String command = "ping -n 3 " + domainName;

			String output = obj.executeCommand(command);

			System.out.println(output);

		}

		private String executeCommand(String command) {

			StringBuffer output = new StringBuffer();

			Process p;
			try {
				p = Runtime.getRuntime().exec(command);
				p.waitFor();
				BufferedReader reader =
	                            new BufferedReader(new InputStreamReader(p.getInputStream()));

	                        String line = "";
				while ((line = reader.readLine())!= null) {
					output.append(line + "\n");
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			return output.toString();

		}*/


}
}
